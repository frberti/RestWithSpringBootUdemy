WebServices:
Aplicação interoperável hospedada que pode ser acessada pelo protocolo HTTP.
São legíveis para máquinas ou outro sistemas.
Podem ser contruídos em partes/componentes, que permitem ser utilizados e reaproveitados (reutilização de código por diversos clients) conforme necessidade do momento.
Permite a comunicação via HTTP entre cliente/servidor, possibilitando interoperabilidade, ou seja, possibilita a atuação em conjunto de dois sistemas diferentes aproveitando o mesmo código/lógica, com baixo acoplamento/dependência.
Em resumo, são "pedaços de software" que são disponibilizados e consumidos via HTTP usando diferentes tipos de clients.
Surgiram com a necessidade de integração de diferentes departamentos permitindo o compartilhamento das informações entre eles.

REST:
Estado representacional de transferência.
Modelo arquiterural de software utilizado na integração de sistemas distribuídos.
Cliente e Servidor separados;
Servidor Stateless, cada request contém todas informações necessárias;
Cacheable;
Interface Uniforme:
	Identificação de recursos por URI;
	Manipulação de recursos através de sua representação;
	Mensagens auto descritivas;
	HATEOAS
Sistema em camadas: suporta balanceamento de carga, proxies, firewalls. Permite inserção de tecnologias entre client/server.
Código sob demanda.

Faz chamadas unicamente em HTTP via URL PATH e suporta diversos formatos de arquivo para enviar e receber dados (client/server), sem necessidade de envelopamento:
JSON
XML
YML
CSV
TXT
IMAGENS
HTML
PDF
BINARIO
Os arquivos que são trafegados consumem menos memória, menos recurso de processamento e possui códido enxuto.
Fácil de se consumir um serviço através de JavaScript.


Request / Response

Aplicações clients que podem ser executadas em um smartphone, tablet, computador, etc, fazem as requests para um server, que por sua vez processa a informação e devolve um response, através dos protocolos HTTP.

Resquest:
Request Message Header (Cabeçalho), é composto de Request Line e Request Header.
Request Body: contêm os parâmetros.

Respose:
Devolução do resultado do processamento da request enviada.
DEvolve informações no Response Header, como:
Status code;
Data;
Tipo de conteúdo e etc.
E um Response message body: como um conteúdo HTML por exemplo.

Parâmetros:

Path Params: São parâmetros de URL que são obrigatórios. Caso não seja definido nenhum valor, vai gerar um erro de validação ou a request será direcionada para outra operação similar que utiliza o mesmo verbo.
Por exemplo, em uma URL com os parâmetros de paginação, sort(asc), pageSize(10) e currentPage(1) deverão ser informados e separados por barra:
request/asc/10/1. É mais comum serem utilizados como parâmetros de busca.

Query Params: Similares aos citados acima, porém não obrigatórios. São informados através de ?, como por exemplo: 
request?firstName=Francisco&lastName=Berti&otherParam=value.

Header Params: Parâmetros que são enviados no header da request, como por exemplo o o tipo de arquivo que é aceito, content type, authorization e etc.

Body Params: Parâmetros enviados no Body da Request em JSON, por exemplo, e são muito utilizados para persistência de informações POST, PUT e PATCH.


Status Codes:

É a forma que a nossa api responde aos clients sobre o que ocorreu durante o processamento de uma request:
1xx
2xx Sucesso
	200 ok
	201 created
	202 accepted
	204 no content

3xx Redirecionamento
4xx Erros de client
	400 bad request - operação que não existe, um endereço errado, por exemplo
	401 unauthorized - quando o client faz uma request para um endpoint ao qual ele nao tem autorização
	403 forbidden - quando o client não tem permissão no endpoint
	404 not found - quando o endereço não é encontrado
5xx Erro de servidor
	500 - INternal server error
	

Swagger

Framework usado para documentar sobre o funcionamento de cada um dos recursos api Rest. O Swagger faz com que a própria api se documente e se mantenha atualizada.
Quais parâmetros nossas operações suportam;
Qual o retorno;
MediaType retornado: JSON, CSV, etc
Modelo.


Autenticação

JWT - Json web token
	
Client --------------------------> Api Server
         request de autenticação:
         POST -> credenciais: ex: email e senha
         
                                   Processa, valida e gera um token (se as credenciais estiverem corretas)
       <---------------------------
       200 ok eyIUhsiuahIHDIUDHidHI

O Client armazana o token e o envia como header nas requests em um parâmetro chamado Authorization

Authorization: Bearer eyIUhsiuahIHDIUDHidHI...

O Token é dividido em 3 blocos separados por ponto:

Bloco 1: Cabeçalho
Bloco 2: Informações
Bloco 3: Assinatura criptografada do jwt para validação



Padrão VO -> Value Object (DTO)
É um intermediário responsável em prover uma camada de segurança para a aplicação, no sentido de proteger a entidade do banco de dados com relação à exposição desses dados e consequentemente sua estrutura.

VO tem o objetivo de não deixar que o client manipule a entidade diretamente. Com o VO, é possível esconder os dados que não são interessantes que o client manipule, como por exemplo, um GET em uma Entidade Pessoa, que pode trazer informações como username e password, ou um POST que permita alterar um dado que não deveria ser alterado.

A arquitetura quando se utiliza o padrão VO tem essa característica:

Para requests POST - Create:

1: O Client envia no body da request um obj VO;
2: O obj VO chega no Controller e é redirecionado para o Service;
3: O Service possui as regras de negócio específicas para tal chamada e um conversor;
4: O obj VO é convertido para Entidade;
5: Após convertido, a Entidade é persistida no banco de dados através da chamada para o Repository.

Para requests GET - FindAll ou FindById:

1: O Client envia uma request;
2: A request chega no Controller, que chama o Service, que por sua vez chama o Repository;
3: O Repository vai até o banco de dados e traz as informações da Entidade para o Service;
4: O Service recebe a Entidade e a converte em VO com apenas os dados que devem ser expostos para o Client, e retorna o VO para o Controller;
5: O Controller devolve um response contendo o VO para o Client que o chamou.

O VO é como uma interface entre Client e Api. O Client só conhece o VO, nunca deve ter acesso direto a Entidade.
O VO encapsula as informações da base de dados.

Convertendo Entidades em VOs com Dozer:

1: Criar VO que representa a Entidade;
2: Refatorar o Controller, substituindo as Entidades em VOs;
3: Adicionar Dependency Dozer no pom.xml;
4: Criar os packages .data.vo, .data.model, .converter para organizar o código/classes;
5: Criar classe DozerConverter no package .converter;
6: Criar atributos e métodos estáticos que serão utilizados para conversão de Entidade para VO e List<Entidade> para List<VO> no padrão Dozer.


Versionamento dos Endpoints:
O objetivo de versionamento de endpoints é oferecer um tempo de adaptação para que uma nova versão possa entrar em vigor.
Isso se aplica, por exemplo, quando há necessidade de se fazer alguma alteração como adição, remoção, etc, de um campo da tabela.
A nova implementação é introduzida no projeto, como uma nova versão (v2) de algum endpoint, e para não quebrar a api para o client que está consumindo a v1, ela é mantida por um período de tempo estabelecido até que ele migre para a v2.
É possível fazer esse versionamento no próprio endpoint, com criação de novo endpoint e nova classe com a melhoria (adição, remoção e campo, etc) e nova implementação no Service. Ou, é possível criar um novo Controller, com a definição de versionamento na URL do RequestMapping.


Migration - Flyway Maven Dependency:
O Padrão Migration oferece a possibilidade de versionamento do banco de dados e maior controle pela aplicação.
Para inserir migration, é necessário inserir a Dependency do Flyway no pom.xml.
Além disso, no application.properties devem ser adicionadas:
spring.flyway.url=jdbc:mysql://localhost:3306/ (url do banco de dados)
spring.flyway.schemas=new_rest_with_spring_boot_udemy (nome da base de dados)
spring.flyway.user=root 
spring.flyway.password=admin123
Devem ser criadas as pastas em resources: db/migration
Devem ser adicionados os arquivos .sql com os comandos de criação da tabela, como também comandos para popular.
O padrão da nomenclatura desses arquivos é:
V1__Nome_do_Arquivo.sql
O projeto deve subir através do git bash, pelo comando: mvn clean package spring-boot:run.


Custom Json Serialization
É utilizado para customizar o Json de retorno.
@JsonPropertyOrder({"atributo1", "atributo2"}): quando adicionado acima do nome da class, ess anotação ordenará os atributos na ordem desejada.
@JsonProperty("atributo_1"): permite que os nomes dos atributos sejam apresentados da forma definida.
@JsonIgnore: omite algum campo que não seja interessante apresentar ao client no retorno do Json.


Content Negotiation 
Quando o servidor é server-driven significa que o server possibilita trabalhar (retornar) com diferentes media types, como Json, XML, pdf, etc ou idioma.
Agent-driven (client): é quando o cliente escolhe consumir o serviço usando uma linguagem: en, es, pt, etc, e o  tipo de formato que ele quer ser respondido, desde que suportado/permitido pelo server.

Cenário 1: primeiro será produzido e consumido json e porteriormente xml.

Etapa 1: adicionar suporte a xml no pom através da dependência do jackson data format xml.
Etapa 2: adicionar um package chamado config em br.com.erudio.
Etapa 3: criar uma new class chamada WebConfig, com as anotações @Configuration e @EnableWebMvc, e implementar WebMvcConfigurer.

Etapa 4: sobrescrever @Override o método configureContentNegotiation com as novas configurações, com isso, ocorrerá uma alteração que permitirá que o client adicione o formato de retorno na url, como por exemplo:
GET: api/person/v1.xml
GET: api/person/v1.json

@Override
public void configureContentNegotiation(ContentNegotiationConfigurer configurer){
	configurer.favorParameter(false)
		ignoreAcceptHeader(false) -> não será ignorado o que chegará no cabeçalho da request
		defaultContentType(MediaType.APPLICATION_JSON) -> conteúdo padrão Json
		mediaType("json", MediaType.APPLICATION_JSON) -> mediaType suportado
		mediaType("xml", MediaType.APPLICATION_XML); -> mediaType suportado
}

Etapa 5: Customizar os métodos do Controller para que eles aceitem produzir e consumir Json e XML.
	produces = {"application/json", "application/xml"}
	consumes = {"application/json", "application/xml"}
	
	Para Get: produces.
	Para Put e Post: produces e consumes.
	
	
Configurando Content Negotiation via Query Param: path?mediaType=xml

	Nova implementação do método configureContentNegotiation:
	@Override
	public void configureContentNegotiation(ContentNegotiationConfigurer configurer){
		configurer.favorPathExtension(false) -> não vai aceitar parâmetro como extensão
			.favorParameter(true) -> vai aceitar via favor parameter
			.parameterName("mediaType")
			.ignoreAcceptHeader(true) -> será ignorado o que chegará no cabeçalho da request
			.useRegisteredExtensionOnly(false)
			.defaultContentType(MediaType.APPLICATION_JSON) -> conteúdo padrão Json
			.mediaType("json", MediaType.APPLICATION_JSON) -> mediaType suportado
			.mediaType("xml", MediaType.APPLICATION_XML); -> mediaType suportado
			


Configurando Content Negotiation via Header Param: path?mediaType=xml

Nova implementação do método configureContentNegotiation:
@Override
public void configureContentNegotiation(ContentNegotiationConfigurer configurer){
	configurer.favorPathExtension(false) -> não vai aceitar parâmetro como extensão
		.favorParameter(false) -> não vai aceitar via favor parameter
		.ignoreAcceptHeader(false) -> não será ignorado o que chegará no cabeçalho da request
		.useRegisteredExtensionOnly(false)
		.defaultContentType(MediaType.APPLICATION_JSON) -> conteúdo padrão Json
		.mediaType("json", MediaType.APPLICATION_JSON) -> mediaType suportado
		.mediaType("xml", MediaType.APPLICATION_XML); -> mediaType suportado
		
No client/Postman o parâmetro é inserido na aba Header, com key Accepted e value application/json ou /xml e etc.

Configurando Content Negotiation para suportar Yaml

Adicionar dependência no pom:
	<dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
        </dependency>

Criação de package: .serialization.converter
Criação de classe: YamlJackson2HttpMessageConverter extends AbstractJackson2HttpMessageConverter
	implementação do contrutor:
		public YamlJackson2HttpMessageConverter() {
			super(new YAMLMapper(), MediaType.parseMediaType("application/x-yaml"));
		}
Adicionando configurações em WebConfig:
	private static final MediaType MEDIA_TYPE_YML = MediaType.valueOf("application/x-yaml");
	
	public void extendMessageConverters(List<HttpMessageConverter<?>> converters){
		converters.add(new YamlJackson2HttpMessageConverter());
	}
	
	@Override
	public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {
		configurer.favorPathExtension(false)
		        .favorParameter(false)
		        .ignoreAcceptHeader(false)
		        .useRegisteredExtensionsOnly(false)
		        .defaultContentType(MediaType.APPLICATION_JSON)
		        .mediaType("json", MediaType.APPLICATION_JSON)
		        .mediaType("xml", MediaType.APPLICATION_XML)
		  --->  .mediaType("x-yaml", MEDIA_TYPE_YML);
	}
Adicionando yaml no Controller:
	produces = {"application/json", "application/xml", "application/x-yaml"},
	consumes = {"application/json", "application/xml", "application/x-yaml"}	
		

	










	







